mass = new array [1..n][1..m]	// nm
for i = 1 to n do				// O(n)
	for i = 1 to m do			// n O(m)
		mass[i,j] = -1			// nm O(1)
for i = 1 to n do				// O(n)
	for j = 1 to min(i,m) do	// O(m)
		mass[i][j] = R(i, j)	// T(i, j)	
return mass[n,m]				// 1




if (i = 1 and j = 1) 	// Abbruch	// 1
	return |a[i]- b[j]|	// 1
else 
	if (mass[i,j] < 0)	// Wenn kein Wert gespeichert	// 1
		if (i > 1 and j = 1)	// Alle A[i] mit B[1] verb.	// 1
			mass[i,j] = max{R(i-1, j), |a[i] - b[j]|}	// T(i-1, j) + O(1)
		else if (i = j and i > 1 ) 	// A[i] mit B[i] verb.	// 1
			mass[i,j] = max{|a[i]- b[j]|, R(i-1, j-1)}	// T(i-1, j-1) + O(1) 
		else	// sonst
			mass[i,j] = min{ max{R(i-1, j), |a[i] - b[j]|}, max{R(i-1, j-1)} , |a[i] - b[j]|}} 	// T(i-1, j) + T(i-1, j-1)  + O(1)
return mass[i,j]	// Rueckgabe	// 1



mass = new array [1..n][1..m]	// nm
f = new array [1..n]			// n
for i = 1 to n do				// O(n)
	for i = 1 to m do			// n O(m)
		mass[i,j] = -1			// nm O(1)
for i = 1 to n do				// O(n)
	for j = 1 to min(i,m) do	// O(m)
		mass[i][j] = R(i, j)	// T(i, j)
i = n
j = m
while (i >= 1 and j >= 1) 
	f[i] = j
	if i = 1 then
		break	// Raus aus der while-Schleife
	if (j >= 1 and mass[i, j] = max(mass[i - 1, j], |a[i] - b[j]|)) then
		// j bleibt gleich
		i = i-1
	else if (j >= 2 and mass[i, j] = max(mass[i - 1, j - 1], |a[i] - b[j]|)) then
		// Diagonalschritt
		i = i-1
		j= j-1
// Unverbrauchte Reste
while (i >= 1) 
	f[i] = 1
	i = i-1
return f	